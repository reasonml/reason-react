let lower = ReactDOM.jsx "div" (((ReactDOM.domProps)[@merlin.hide ]) ())
let lower_empty_attr =
  ReactDOM.jsx "div" (((ReactDOM.domProps)[@merlin.hide ]) ~className:"" ())
let lower_inline_styles =
  ReactDOM.jsx "div"
    (((ReactDOM.domProps)[@merlin.hide ])
       ~style:(ReactDOM.Style.make ~backgroundColor:"gainsboro" ()) ())
let lower_inner_html =
  ReactDOM.jsx "div"
    (((ReactDOM.domProps)[@merlin.hide ])
       ~dangerouslySetInnerHTML:([%bs.obj { __html = text }]) ())
let lower_opt_attr =
  ReactDOM.jsx "div" (((ReactDOM.domProps)[@merlin.hide ]) ?tabIndex ())
let lowerWithChildAndProps foo =
  ReactDOM.jsx "a"
    (((ReactDOM.domProps)[@merlin.hide ]) ~children:foo ~tabIndex:1
       ~href:"https://example.com" ())
let lower_child_static =
  ReactDOM.jsx "div"
    (((ReactDOM.domProps)[@merlin.hide ])
       ~children:(ReactDOM.jsx "span"
                    (((ReactDOM.domProps)[@merlin.hide ]) ())) ())
let lower_child_ident =
  ReactDOM.jsx "div"
    (((ReactDOM.domProps)[@merlin.hide ]) ~children:lolaspa ())
let lower_child_single =
  ReactDOM.jsx "div"
    (((ReactDOM.domProps)[@merlin.hide ])
       ~children:(ReactDOM.jsx "div"
                    (((ReactDOM.domProps)[@merlin.hide ]) ())) ())
let lower_children_multiple foo bar =
  ReactDOM.jsxs "lower"
    (((ReactDOM.domProps)[@merlin.hide ]) ~children:(React.array [|foo;bar|])
       ())
let lower_child_with_upper_as_children =
  ReactDOM.jsx "div"
    (((ReactDOM.domProps)[@merlin.hide ])
       ~children:(React.jsx App.make (App.makeProps ())) ())
let lower_children_nested =
  ReactDOM.jsx "div"
    (((ReactDOM.domProps)[@merlin.hide ])
       ~children:(ReactDOM.jsxs "div"
                    (((ReactDOM.domProps)[@merlin.hide ])
                       ~children:(React.array
                                    [|(ReactDOM.jsx "h2"
                                         (((ReactDOM.domProps)
                                            [@merlin.hide ])
                                            ~children:("jsoo-react" |> s)
                                            ~className:"title" ()));(
                                      ReactDOM.jsx "nav"
                                        (((ReactDOM.domProps)[@merlin.hide ])
                                           ~children:(ReactDOM.jsx "ul"
                                                        (((ReactDOM.domProps)
                                                           [@merlin.hide ])
                                                           ~children:(
                                                           (examples |>
                                                              (List.map
                                                                 (fun e ->
                                                                    ReactDOM.jsxKeyed
                                                                    "li"
                                                                    (((ReactDOM.domProps)
                                                                    [@merlin.hide
                                                                    ])
                                                                    ~children:(
                                                                    ReactDOM.jsx
                                                                    "a"
                                                                    (((ReactDOM.domProps)
                                                                    [@merlin.hide
                                                                    ])
                                                                    ~children:(
                                                                    e.title
                                                                    |> s)
                                                                    ~href:(
                                                                    e.path)
                                                                    ~onClick:(
                                                                    fun event
                                                                    ->
                                                                    ReactEvent.Mouse.preventDefault
                                                                    event;
                                                                    ReactRouter.push
                                                                    e.path)
                                                                    ())) ())
                                                                    ~key:(
                                                                    e.path)
                                                                    ())))
                                                             |> React.list)
                                                           ()))
                                           ~className:"menu" ()))|])
                       ~className:"sidebar" ())) ~className:"flex-container"
       ())
let fragment foo = ((ReactDOM.createElement React.jsxFragment [|foo|])
  [@bla ])
let poly_children_fragment foo bar =
  ReactDOM.createElement React.jsxFragment [|foo;bar|]
let nested_fragment foo bar baz =
  ReactDOM.createElement React.jsxFragment
    [|foo;(ReactDOM.createElement React.jsxFragment [|bar;baz|])|]
let nested_fragment_with_lower foo =
  ReactDOM.createElement React.jsxFragment
    [|(ReactDOM.jsx "div"
         (((ReactDOM.domProps)[@merlin.hide ]) ~children:foo ()))|]
let upper = React.jsx Upper.make (Upper.makeProps ())
let upper_prop = React.jsx Upper.make (Upper.makeProps ~count ())
let upper_children_single foo =
  React.jsx Upper.make (Upper.makeProps ~children:foo ())
let upper_children_multiple foo bar =
  React.jsxs Upper.make
    (Upper.makeProps ~children:(React.array [|foo;bar|]) ())
let upper_children =
  React.jsx Page.make
    (Page.makeProps
       ~children:(ReactDOM.jsx "h1"
                    (((ReactDOM.domProps)[@merlin.hide ])
                       ~children:(React.string "Yep") ())) ~moreProps:"hgalo"
       ())
let upper_nested_module =
  React.jsx Foo.Bar.make (Foo.Bar.makeProps ~a:1 ~b:"1" ())
let upper_child_expr =
  React.jsx Div.make (Div.makeProps ~children:(React.int 1) ())
let upper_child_ident = React.jsx Div.make (Div.makeProps ~children:lola ())
let upper_all_kinds_of_props =
  React.jsx MyComponent.make
    (MyComponent.makeProps
       ~children:(ReactDOM.jsx "div"
                    (((ReactDOM.domProps)[@merlin.hide ]) ~children:"hello"
                       ())) ~booleanAttribute:true ~stringAttribute:"string"
       ~intAttribute:1 ?forcedOptional:((Some "hello")[@explicit_arity ])
       ~onClick:(send handleClick) ())
let upper_ref_with_children =
  React.jsx FancyButton.make
    (FancyButton.makeProps
       ~children:(ReactDOM.jsx "div"
                    (((ReactDOM.domProps)[@merlin.hide ]) ())) ~ref:buttonRef
       ())
let lower_ref_with_children =
  ReactDOM.jsx "button"
    (((ReactDOM.domProps)[@merlin.hide ]) ~children ~ref
       ~className:"FancyButton" ())
let lower_with_many_props =
  ReactDOM.jsx "div"
    (((ReactDOM.domProps)[@merlin.hide ])
       ~children:(ReactDOM.jsxs "picture"
                    (((ReactDOM.domProps)[@merlin.hide ])
                       ~children:(React.array
                                    [|(ReactDOM.jsx "img"
                                         (((ReactDOM.domProps)
                                            [@merlin.hide ])
                                            ~src:"picture/img.png"
                                            ~alt:"test picture/img.png"
                                            ~id:"idimg" ()));(ReactDOM.jsx
                                                                "source"
                                                                (((ReactDOM.domProps)
                                                                   [@merlin.hide
                                                                    ])
                                                                   ~type_:"image/webp"
                                                                   ~src:"picture/img1.webp"
                                                                   ()));(
                                      ReactDOM.jsx "source"
                                        (((ReactDOM.domProps)[@merlin.hide ])
                                           ~type_:"image/jpeg"
                                           ~src:"picture/img2.jpg" ()))|])
                       ~id:"idpicture" ())) ~translate:"yes" ())
let some_random_html_element =
  ReactDOM.jsx "text"
    (((ReactDOM.domProps)[@merlin.hide ]) ~dx:"1 2" ~dy:"3 4" ())
module React_component_with_props =
  struct
    external makeProps :
      lola:'lola -> ?key:string -> unit -> < lola: 'lola   >  Js.t = ""
    [@@bs.obj ]
    let make =
      ((fun ~lola ->
          ReactDOM.jsx "div"
            (((ReactDOM.domProps)[@merlin.hide ])
               ~children:(React.string lola) ()))
      [@warning "-16"])
    let make =
      let Generated$React_component_with_props
        (Props : < lola: 'lola   >  Js.t) = make ~lola:(Props ## lola) in
      Generated$React_component_with_props
  end
let react_component_with_props =
  React.jsx React_component_with_props.make
    (React_component_with_props.makeProps ~lola:"flores" ())
module Upper_case_with_fragment_as_root =
  struct
    external makeProps :
      ?name:'name -> ?key:string -> unit -> < name: 'name option   >  Js.t =
        ""[@@bs.obj ]
    let make =
      ((fun ?(name= "") ->
          ReactDOM.createElement React.jsxFragment
            [|(ReactDOM.jsx "div"
                 (((ReactDOM.domProps)[@merlin.hide ])
                    ~children:(React.string ("First " ^ name)) ()));(
              React.jsx Hello.make
                (Hello.makeProps ~children:(React.string ("2nd " ^ name))
                   ~one:"1" ()))|])
      [@warning "-16"])
    let make =
      let Generated$Upper_case_with_fragment_as_root
        (Props : < name: 'name option   >  Js.t) = make ?name:(Props ## name) in
      Generated$Upper_case_with_fragment_as_root
  end
module Using_React_memo =
  struct
    external makeProps :
      a:'a -> ?key:string -> unit -> < a: 'a   >  Js.t = ""[@@bs.obj ]
    let make =
      ((fun ~a ->
          ReactDOM.jsx "div"
            (((ReactDOM.domProps)[@merlin.hide ])
               ~children:((Printf.sprintf "`a` is %s" a) |> React.string) ()))
      [@warning "-16"])
    let make =
      React.memo
        (let Generated$Using_React_memo (Props : < a: 'a   >  Js.t) =
           make ~a:(Props ## a) in
         Generated$Using_React_memo)
  end
module Using_memo_custom_compare_Props =
  struct
    external makeProps :
      a:'a -> ?key:string -> unit -> < a: 'a   >  Js.t = ""[@@bs.obj ]
    let make =
      React.memoCustomCompareProps
        (fun ~a ->
           ReactDOM.jsx "div"
             (((ReactDOM.domProps)[@merlin.hide ])
                ~children:((Printf.sprintf "`a` is %d" a) |> React.string) ()))
        (fun prevPros -> fun nextProps -> false)
    let make =
      let Generated$Using_memo_custom_compare_Props
        (Props : < a: 'a   >  Js.t) = make ~a:(Props ## a) in
      Generated$Using_memo_custom_compare_Props
  end
module Forward_Ref =
  struct
    external makeProps :
      children:'children ->
        buttonRef:'buttonRef ->
          ?key:string ->
            unit -> < children: 'children  ;buttonRef: 'buttonRef   >  Js.t =
        ""[@@bs.obj ]
    let make =
      ((fun ~children ->
          ((fun ~buttonRef ->
              ReactDOM.jsx "button"
                (((ReactDOM.domProps)[@merlin.hide ]) ~children
                   ~ref:buttonRef ~className:"FancyButton" ()))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      React.forwardRef
        (let Generated$Forward_Ref
           (Props : < children: 'children  ;buttonRef: 'buttonRef   >  Js.t)
           =
           make ~buttonRef:(Props ## buttonRef) ~children:(Props ## children) in
         Generated$Forward_Ref)
  end
module Onclick_handler_button =
  struct
    external makeProps :
      name:'name ->
        ?isDisabled:'isDisabled ->
          ?key:string ->
            unit -> < name: 'name  ;isDisabled: 'isDisabled option   >  Js.t
        = ""[@@bs.obj ]
    let make =
      ((fun ~name ->
          ((fun ?isDisabled ->
              let onClick event = Js.log event in
              ReactDOM.jsx "button"
                (((ReactDOM.domProps)[@merlin.hide ]) ~name ~onClick
                   ~disabled:isDisabled ()))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Generated$Onclick_handler_button
        (Props : < name: 'name  ;isDisabled: 'isDisabled option   >  Js.t) =
        make ?isDisabled:(Props ## isDisabled) ~name:(Props ## name) in
      Generated$Onclick_handler_button
  end
module Children_as_string =
  struct
    external makeProps :
      ?name:'name -> ?key:string -> unit -> < name: 'name option   >  Js.t =
        ""[@@bs.obj ]
    let make =
      ((fun ?(name= "joe") ->
          ReactDOM.jsx "div"
            (((ReactDOM.domProps)[@merlin.hide ])
               ~children:((Printf.sprintf "`name` is %s" name) |>
                            React.string) ()))
      [@warning "-16"])
    let make =
      let Generated$Children_as_string
        (Props : < name: 'name option   >  Js.t) = make ?name:(Props ## name) in
      Generated$Children_as_string
  end
let () = Dream.run ()
let l = 33
module Uppercase_with_SSR_components =
  struct
    external makeProps :
      children:'children ->
        moreProps:'moreProps ->
          ?key:string ->
            unit -> < children: 'children  ;moreProps: 'moreProps   >  Js.t =
        ""[@@bs.obj ]
    let make =
      ((fun ~children ->
          ((fun ~moreProps ->
              ReactDOM.jsxs "html"
                (((ReactDOM.domProps)[@merlin.hide ])
                   ~children:(React.array
                                [|(ReactDOM.jsx "head"
                                     (((ReactDOM.domProps)[@merlin.hide ])
                                        ~children:(ReactDOM.jsx "title"
                                                     (((ReactDOM.domProps)
                                                        [@merlin.hide ])
                                                        ~children:(React.string
                                                                    ("SSR React "
                                                                    ^
                                                                    moreProps))
                                                        ())) ()));(ReactDOM.jsxs
                                                                    "body"
                                                                    (((ReactDOM.domProps)
                                                                    [@merlin.hide
                                                                    ])
                                                                    ~children:(
                                                                    React.array
                                                                    [|(
                                                                    ReactDOM.jsx
                                                                    "div"
                                                                    (((ReactDOM.domProps)
                                                                    [@merlin.hide
                                                                    ])
                                                                    ~children
                                                                    ~id:"root"
                                                                    ()));(
                                                                    ReactDOM.jsx
                                                                    "script"
                                                                    (((ReactDOM.domProps)
                                                                    [@merlin.hide
                                                                    ])
                                                                    ~src:"/static/client.js"
                                                                    ()))|])
                                                                    ()))|])
                   ()))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Generated$Uppercase_with_SSR_components
        (Props : < children: 'children  ;moreProps: 'moreProps   >  Js.t) =
        make ~moreProps:(Props ## moreProps) ~children:(Props ## children) in
      Generated$Uppercase_with_SSR_components
  end
module Upper_with_aria =
  struct
    external makeProps :
      children:'children ->
        ?key:string -> unit -> < children: 'children   >  Js.t = ""[@@bs.obj
                                                                    ]
    let make =
      ((fun ~children ->
          ReactDOM.jsx "div"
            (((ReactDOM.domProps)[@merlin.hide ]) ~children
               ~ariaHidden:"true" ()))
      [@warning "-16"])
    let make =
      let Generated$Upper_with_aria (Props : < children: 'children   >  Js.t)
        = make ~children:(Props ## children) in
      Generated$Upper_with_aria
  end
let data_attributes_should_transform_to_kebabcase =
  ReactDOM.createElement React.jsxFragment
    [|(ReactDOM.jsx "div"
         (((ReactDOM.domProps)[@merlin.hide ]) ~dataAttribute:""
            ~dataattribute:"" ~className:"md:w-1/3" ()));(ReactDOM.jsx "div"
                                                            (((ReactDOM.domProps)
                                                               [@merlin.hide
                                                                 ])
                                                               ~className:"md:w-2/3"
                                                               ()))|]
let render_onclickPropsAsString =
  ReactDOM.jsx "div"
    (((ReactDOM.domProps)[@merlin.hide ]) ~_onclick:"alert('hello')" ())
module External =
  struct
    external componentProps :
      a:int ->
        b:string -> ?key:string -> unit -> < a: int  ;b: string   >  Js.t =
        ""[@@bs.obj ]
    external component :
      (< a: int  ;b: string   >  Js.t, React.element) React.componentLike =
        "require(\"my-react-library\").MyReactComponent"[@@otherAttribute
                                                          "bla"]
  end
module type X_int  = sig val x : int end
module Func(M:X_int) =
  struct
    let x = M.x + 1
    external makeProps :
      a:'a -> b:'b -> ?key:string -> unit -> < a: 'a  ;b: 'b   >  Js.t = ""
    [@@bs.obj ]
    let make =
      ((fun ~a ->
          ((fun ~b ->
              fun _ ->
                print_endline "This function should be named `Test$Func`" M.x;
                ReactDOM.jsx "div" (((ReactDOM.domProps)[@merlin.hide ]) ()))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Generated$Func (Props : < a: 'a  ;b: 'b   >  Js.t) =
        make ~b:(Props ## b) ~a:(Props ## a) () in
      Generated$Func
  end
