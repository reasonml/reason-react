let lower = ReactDOM.jsx "div" (ReactDOM.domProps ())
let lower_empty_attr =
  ReactDOM.jsx "div"
    (ReactDOM.domProps ~className:(("")[@reason.raw_literal ""]) ())
let lower_inline_styles =
  ReactDOM.jsx "div"
    (ReactDOM.domProps
       ~style:((ReactDOM.Style.make ~backgroundColor:(("gainsboro")
                  [@reason.raw_literal "gainsboro"]) ())
       [@reason.preserve_braces ]) ())
let lower_inner_html =
  ReactDOM.jsx "div"
    (ReactDOM.domProps ~dangerouslySetInnerHTML:([%bs.obj { __html = text }])
       ())
let lower_opt_attr = ReactDOM.jsx "div" (ReactDOM.domProps ?tabIndex ())
let lowerWithChildAndProps foo =
  ReactDOM.jsx "a"
    (ReactDOM.domProps ~children:foo ~tabIndex:1
       ~href:(("https://example.com")
       [@reason.raw_literal "https://example.com"]) ())
let lower_child_static =
  ReactDOM.jsx "div"
    (ReactDOM.domProps ~children:(ReactDOM.jsx "span" (ReactDOM.domProps ()))
       ())
let lower_child_ident =
  ReactDOM.jsx "div" (ReactDOM.domProps ~children:lolaspa ())
let lower_child_single =
  ReactDOM.jsx "div"
    (ReactDOM.domProps ~children:(ReactDOM.jsx "div" (ReactDOM.domProps ()))
       ())
let lower_children_multiple foo bar =
  ReactDOM.jsxs "lower"
    (ReactDOM.domProps ~children:(React.array [|foo;bar|]) ())
let lower_child_with_upper_as_children =
  ReactDOM.jsx "div"
    (ReactDOM.domProps ~children:(React.jsx App.make (App.makeProps ())) ())
let lower_children_nested =
  ReactDOM.jsx "div"
    (ReactDOM.domProps
       ~children:(ReactDOM.jsxs "div"
                    (ReactDOM.domProps
                       ~children:(React.array
                                    [|(ReactDOM.jsx "h2"
                                         (ReactDOM.domProps
                                            ~children:(((("jsoo-react")
                                                          [@reason.raw_literal
                                                            "jsoo-react"])
                                                          |> s)
                                            [@reason.preserve_braces ])
                                            ~className:(("title")
                                            [@reason.raw_literal "title"]) ()));(
                                      ReactDOM.jsx "nav"
                                        (ReactDOM.domProps
                                           ~children:(ReactDOM.jsx "ul"
                                                        (ReactDOM.domProps
                                                           ~children:((
                                                           (examples |>
                                                              (List.map
                                                                 (fun e ->
                                                                    ReactDOM.jsxKeyed
                                                                    "li"
                                                                    (ReactDOM.domProps
                                                                    ~children:(
                                                                    ReactDOM.jsx
                                                                    "a"
                                                                    (ReactDOM.domProps
                                                                    ~children:((
                                                                    e.title
                                                                    |> s)
                                                                    [@reason.preserve_braces
                                                                    ])
                                                                    ~href:((
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ])
                                                                    ~onClick:((
                                                                    fun event
                                                                    ->
                                                                    ((ReactEvent.Mouse.preventDefault
                                                                    event;
                                                                    ReactRouter.push
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ]))
                                                                    [@reason.preserve_braces
                                                                    ]) ()))
                                                                    ())
                                                                    ((e.path)
                                                                    [@reason.preserve_braces
                                                                    ]))))
                                                             |> React.list)
                                                           [@reason.preserve_braces
                                                             ]) ()))
                                           ~className:(("menu")
                                           [@reason.raw_literal "menu"]) ()))|])
                       ~className:(("sidebar")
                       [@reason.raw_literal "sidebar"]) ()))
       ~className:(("flex-container")[@reason.raw_literal "flex-container"])
       ())
let fragment foo = ((ReactDOM.createElement React.jsxFragment [|foo|])
  [@bla ])
let poly_children_fragment foo bar =
  ReactDOM.createElement React.jsxFragment [|foo;bar|]
let nested_fragment foo bar baz =
  ReactDOM.createElement React.jsxFragment
    [|foo;(ReactDOM.createElement React.jsxFragment [|bar;baz|])|]
let nested_fragment_with_lower foo =
  ReactDOM.createElement React.jsxFragment
    [|(ReactDOM.jsx "div" (ReactDOM.domProps ~children:foo ()))|]
let upper = React.jsx Upper.make (Upper.makeProps ())
let upper_prop = React.jsx Upper.make (Upper.makeProps ~count ())
let upper_children_single foo =
  React.jsx Upper.make (Upper.makeProps ~children:foo ())
let upper_children_multiple foo bar =
  React.jsxs Upper.make
    (Upper.makeProps ~children:(React.array [|foo;bar|]) ())
let upper_children =
  React.jsx Page.make
    (Page.makeProps
       ~children:(ReactDOM.jsx "h1"
                    (ReactDOM.domProps
                       ~children:((React.string (("Yep")
                                     [@reason.raw_literal "Yep"]))
                       [@reason.preserve_braces ]) ())) ~moreProps:(("hgalo")
       [@reason.raw_literal "hgalo"]) ())
let upper_nested_module =
  React.jsx Foo.Bar.make
    (Foo.Bar.makeProps ~a:1 ~b:(("1")[@reason.raw_literal "1"]) ())
let upper_child_expr =
  React.jsx Div.make
    (Div.makeProps ~children:((React.int 1)[@reason.preserve_braces ]) ())
let upper_child_ident = React.jsx Div.make (Div.makeProps ~children:lola ())
let upper_all_kinds_of_props =
  React.jsx MyComponent.make
    (MyComponent.makeProps
       ~children:(ReactDOM.jsx "div"
                    (ReactDOM.domProps ~children:(("hello")
                       [@reason.raw_literal "hello"]) ()))
       ~booleanAttribute:true ~stringAttribute:(("string")
       [@reason.raw_literal "string"]) ~intAttribute:1
       ?forcedOptional:((Some (("hello")[@reason.raw_literal "hello"]))
       [@reason.preserve_braces ][@explicit_arity ])
       ~onClick:((send handleClick)[@reason.preserve_braces ]) ())
let upper_ref_with_children =
  React.jsx FancyButton.make
    (FancyButton.makeProps
       ~children:(ReactDOM.jsx "div" (ReactDOM.domProps ())) ~ref:buttonRef
       ())
let lower_ref_with_children =
  ReactDOM.jsx "button"
    (ReactDOM.domProps ~children ~ref ~className:(("FancyButton")
       [@reason.raw_literal "FancyButton"]) ())
let lower_with_many_props =
  ReactDOM.jsx "div"
    (ReactDOM.domProps
       ~children:(ReactDOM.jsxs "picture"
                    (ReactDOM.domProps
                       ~children:(React.array
                                    [|(ReactDOM.jsx "img"
                                         (ReactDOM.domProps
                                            ~src:(("picture/img.png")
                                            [@reason.raw_literal
                                              "picture/img.png"])
                                            ~alt:(("test picture/img.png")
                                            [@reason.raw_literal
                                              "test picture/img.png"])
                                            ~id:(("idimg")
                                            [@reason.raw_literal "idimg"]) ()));(
                                      ReactDOM.jsx "source"
                                        (ReactDOM.domProps
                                           ~type_:(("image/webp")
                                           [@reason.raw_literal "image/webp"])
                                           ~src:(("picture/img1.webp")
                                           [@reason.raw_literal
                                             "picture/img1.webp"]) ()));(
                                      ReactDOM.jsx "source"
                                        (ReactDOM.domProps
                                           ~type_:(("image/jpeg")
                                           [@reason.raw_literal "image/jpeg"])
                                           ~src:(("picture/img2.jpg")
                                           [@reason.raw_literal
                                             "picture/img2.jpg"]) ()))|])
                       ~id:(("idpicture")[@reason.raw_literal "idpicture"])
                       ())) ~translate:(("yes")[@reason.raw_literal "yes"])
       ())
let some_random_html_element =
  ReactDOM.jsx "text"
    (ReactDOM.domProps ~dx:(("1 2")[@reason.raw_literal "1 2"]) ~dy:(("3 4")
       [@reason.raw_literal "3 4"]) ())
module React_component_with_props =
  struct
    external makeProps :
      lola:'lola -> ?key:string -> unit -> < lola: 'lola   >  Js.t = ""
    [@@bs.obj ]
    let make =
      ((fun ~lola ->
          ((ReactDOM.jsx "div"
              (ReactDOM.domProps ~children:((React.string lola)
                 [@reason.preserve_braces ]) ()))
          [@reason.preserve_braces ]))
      [@warning "-16"])
    let make =
      let Generated$React_component_with_props
        (Props : < lola: 'lola   >  Js.t) = make ~lola:(Props ## lola) in
      Generated$React_component_with_props
  end
let react_component_with_props =
  React.jsx React_component_with_props.make
    (React_component_with_props.makeProps ~lola:(("flores")
       [@reason.raw_literal "flores"]) ())
module Upper_case_with_fragment_as_root =
  struct
    external makeProps :
      ?name:'name -> ?key:string -> unit -> < name: 'name option   >  Js.t =
        ""[@@bs.obj ]
    let make =
      ((fun ?(name= (("")[@reason.raw_literal ""])) ->
          ReactDOM.createElement React.jsxFragment
            [|(ReactDOM.jsx "div"
                 (ReactDOM.domProps
                    ~children:((React.string
                                  ((("First ")[@reason.raw_literal "First "])
                                     ^ name))[@reason.preserve_braces ]) ()));(
              React.jsx Hello.make
                (Hello.makeProps
                   ~children:((React.string
                                 ((("2nd ")[@reason.raw_literal "2nd "]) ^
                                    name))[@reason.preserve_braces ])
                   ~one:(("1")[@reason.raw_literal "1"]) ()))|])
      [@warning "-16"])
    let make =
      let Generated$Upper_case_with_fragment_as_root
        (Props : < name: 'name option   >  Js.t) = make ?name:(Props ## name) in
      Generated$Upper_case_with_fragment_as_root
  end
module Forward_Ref =
  struct
    external makeProps :
      children:'children ->
        buttonRef:'buttonRef ->
          ?key:string ->
            unit -> < children: 'children  ;buttonRef: 'buttonRef   >  Js.t =
        ""[@@bs.obj ]
    let make =
      ((fun ~children ->
          ((fun ~buttonRef ->
              ((ReactDOM.jsx "button"
                  (ReactDOM.domProps ~children ~ref:buttonRef
                     ~className:(("FancyButton")
                     [@reason.raw_literal "FancyButton"]) ()))
              [@reason.preserve_braces ]))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      React.forwardRef
        (let Generated$Forward_Ref
           (Props : < children: 'children  ;buttonRef: 'buttonRef   >  Js.t)
           =
           make ~buttonRef:(Props ## buttonRef) ~children:(Props ## children) in
         Generated$Forward_Ref)
  end
module Onclick_handler_button =
  struct
    external makeProps :
      name:'name ->
        ?isDisabled:'isDisabled ->
          ?key:string ->
            unit -> < name: 'name  ;isDisabled: 'isDisabled option   >  Js.t
        = ""[@@bs.obj ]
    let make =
      ((fun ~name ->
          ((fun ?isDisabled ->
              ((let onClick event = Js.log event in
                ReactDOM.jsx "button"
                  (ReactDOM.domProps ~name ~onClick ~disabled:isDisabled ()))
              [@reason.preserve_braces ]))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Generated$Onclick_handler_button
        (Props : < name: 'name  ;isDisabled: 'isDisabled option   >  Js.t) =
        make ?isDisabled:(Props ## isDisabled) ~name:(Props ## name) in
      Generated$Onclick_handler_button
  end
module Children_as_string =
  struct
    external makeProps :
      ?name:'name -> ?key:string -> unit -> < name: 'name option   >  Js.t =
        ""[@@bs.obj ]
    let make =
      ((fun ?(name= (("joe")[@reason.raw_literal "joe"])) ->
          ReactDOM.jsx "div"
            (ReactDOM.domProps
               ~children:(((Printf.sprintf (("`name` is %s")
                              [@reason.raw_literal "`name` is %s"]) name)
                             |> React.string)[@reason.preserve_braces ]) ()))
      [@warning "-16"])
    let make =
      let Generated$Children_as_string
        (Props : < name: 'name option   >  Js.t) = make ?name:(Props ## name) in
      Generated$Children_as_string
  end
let () = Dream.run ()
let l = 33
module Uppercase_with_SSR_components =
  struct
    external makeProps :
      children:'children ->
        moreProps:'moreProps ->
          ?key:string ->
            unit -> < children: 'children  ;moreProps: 'moreProps   >  Js.t =
        ""[@@bs.obj ]
    let make =
      ((fun ~children ->
          ((fun ~moreProps ->
              ReactDOM.jsxs "html"
                (ReactDOM.domProps
                   ~children:(React.array
                                [|(ReactDOM.jsx "head"
                                     (ReactDOM.domProps
                                        ~children:(ReactDOM.jsx "title"
                                                     (ReactDOM.domProps
                                                        ~children:((React.string
                                                                    ((("SSR React ")
                                                                    [@reason.raw_literal
                                                                    "SSR React "])
                                                                    ^
                                                                    moreProps))
                                                        [@reason.preserve_braces
                                                          ]) ())) ()));(
                                  ReactDOM.jsxs "body"
                                    (ReactDOM.domProps
                                       ~children:(React.array
                                                    [|(ReactDOM.jsx "div"
                                                         (ReactDOM.domProps
                                                            ~children
                                                            ~id:(("root")
                                                            [@reason.raw_literal
                                                              "root"]) ()));(
                                                      ReactDOM.jsx "script"
                                                        (ReactDOM.domProps
                                                           ~src:(("/static/client.js")
                                                           [@reason.raw_literal
                                                             "/static/client.js"])
                                                           ()))|]) ()))|]) ()))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Generated$Uppercase_with_SSR_components
        (Props : < children: 'children  ;moreProps: 'moreProps   >  Js.t) =
        make ~moreProps:(Props ## moreProps) ~children:(Props ## children) in
      Generated$Uppercase_with_SSR_components
  end
module Upper_with_aria =
  struct
    external makeProps :
      children:'children ->
        ?key:string -> unit -> < children: 'children   >  Js.t = ""[@@bs.obj
                                                                    ]
    let make =
      ((fun ~children ->
          ReactDOM.jsx "div"
            (ReactDOM.domProps ~children ~ariaHidden:(("true")
               [@reason.raw_literal "true"]) ()))
      [@warning "-16"])
    let make =
      let Generated$Upper_with_aria (Props : < children: 'children   >  Js.t)
        = make ~children:(Props ## children) in
      Generated$Upper_with_aria
  end
let data_attributes_should_transform_to_kebabcase =
  ReactDOM.createElement React.jsxFragment
    [|(ReactDOM.jsx "div"
         (ReactDOM.domProps ~dataAttribute:(("")[@reason.raw_literal ""])
            ~dataattribute:(("")[@reason.raw_literal ""])
            ~className:(("md:w-1/3")[@reason.raw_literal "md:w-1/3"]) ()));(
      ReactDOM.jsx "div"
        (ReactDOM.domProps ~className:(("md:w-2/3")
           [@reason.raw_literal "md:w-2/3"]) ()))|]
let render_onclickPropsAsString =
  ReactDOM.jsx "div"
    (ReactDOM.domProps ~_onclick:(("alert('hello')")
       [@reason.raw_literal "alert('hello')"]) ())
module External =
  struct
    external componentProps :
      a:int ->
        b:string -> ?key:string -> unit -> < a: int  ;b: string   >  Js.t =
        ""[@@bs.obj ]
    external component :
      (< a: int  ;b: string   >  Js.t, React.element) React.componentLike =
        "require(\"my-react-library\").MyReactComponent"[@@otherAttribute
                                                          (("bla")
                                                            [@reason.raw_literal
                                                              "bla"])]
  end
module type X_int  = sig val x : int end
module Func(M:X_int) =
  struct
    let x = M.x + 1
    external makeProps :
      a:'a -> b:'b -> ?key:string -> unit -> < a: 'a  ;b: 'b   >  Js.t = ""
    [@@bs.obj ]
    let make =
      ((fun ~a ->
          ((fun ~b ->
              fun _ ->
                ((print_endline
                    (("This function should be named `Test$Func`")
                    [@reason.raw_literal
                      "This function should be named `Test$Func`"]) M.x;
                  ReactDOM.jsx "div" (ReactDOM.domProps ()))
                [@reason.preserve_braces ]))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Generated$Func (Props : < a: 'a  ;b: 'b   >  Js.t) =
        make ~b:(Props ## b) ~a:(Props ## a) () in
      Generated$Func
  end
